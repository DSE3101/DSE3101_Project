shinyApp(ui,server)
library(shiny)
library(tidyverse)
library(ggthemes)
#devtools::install_github("statistiekcbs/scrollytell")
library(scrollytell)
#install.packages("styler")
library(styler)
slider = function(){
sliderInput("dateRange",
"Select Training Date:",
min = as.Date("1960-01-01"),
max = as.Date("2023-12-31"),
value = c(as.Date("1980-01-01"), as.Date("2020-01-01")),
timeFormat = "%Y-%m-%d")
}
dropdown <- function(){
selectInput("dropdownMenu",
"Choose an Option:",
choices = c("Covid-19 Recession" = "opt1",
"Lehmann Brother's Crash" = "opt2",
"Great Financial Crisis" = "opt3")
)
}
bodyText <- function(text){
tags$p(text, class = "bodyText")
}
ui <- fluidPage(
includeCSS("styles.css"),
div(
id = "Time Series Selection",
class = "main",
titlePanel("Time Series Analysis"),
mainPanel(
bodyText("Test text"),
div(class = "graphBorder",
plotOutput("timeSeriesGraph")),
slider(),
dropdown()
)
),
div(id = "scrolly-section",
scrolly_container("scr",
scrolly_sections(
scrolly_section(
id = "section-red",
h3("Red Section Title"),
p("Test scrolly 1"),
plotOutput("timeSeriesGraph")  # Placeholder for the ggplot output
),
scrolly_section(id = "section-blue", h3("Blue"), p("Blue section content")),
scrolly_section(id = "section-pink", h3("Pink"), p("Pink section content")),
scrolly_section(id = "section-purple", h3("Purple"), p("Purple section content")),
scrolly_section(id = "section-orange", h3("Orange"), p("Orange section content"))
)
)
),
titlePanel("Real Time vs Vintage Data")
)
#source("Time_Series.R")
set.seed(123)
dummyData <- data.frame(
date = seq(as.Date("1960-01-01"), as.Date("2023-12-31"), by = "month"),
value = cumsum(runif(768, min = -10, max = 10)) # Random walk data
)
server <- function(input, output) {
output$timeSeriesGraph <- renderPlot({
# Ensure highlightedData uses the filter based on selected date range
highlightedData <- dummyData %>%
filter(date >= input$dateRange[1], date <= input$dateRange[2])
# Start plotting using ggplot2 with dummyData as the base data
plot <- ggplot() +
geom_line(data = dummyData, aes(x = date, y = value)) +
geom_line(data = highlightedData, aes(x = date, y = value), color = "red", size = 1.5) +
#Colour the user selected training data red
labs(title = "Dummy Time Series Graph", x = "Date", y = "Value") +
theme_economist_white()
plot
})
}
shinyApp(ui,server)
ui <- fluidPage(
includeCSS("styles.css"),
div(
id = "Time Series Selection",
class = "main",
titlePanel("Time Series Analysis"),
mainPanel(
bodyText("Test text"),
div(class = "graphBorder",
plotOutput("timeSeriesGraph")),
slider(),
dropdown()
)
),
div(id = "scrolly-section",
scrolly_container("scr",
scrolly_graph(
plotOutput("timeSeriesGraph")  # Placeholder for the ggplot output
),
scrolly_sections(
scrolly_section(id = "section-blue", h3("Blue"), p("Blue section content")),
scrolly_section(id = "section-pink", h3("Pink"), p("Pink section content")),
scrolly_section(id = "section-purple", h3("Purple"), p("Purple section content")),
scrolly_section(id = "section-orange", h3("Orange"), p("Orange section content"))
)
)
),
titlePanel("Real Time vs Vintage Data")
)
shinyApp(ui,server)
library(shiny)
library(tidyverse)
library(ggthemes)
#devtools::install_github("statistiekcbs/scrollytell")
library(scrollytell)
#install.packages("styler")
library(styler)
slider = function(){
sliderInput("dateRange",
"Select Training Date:",
min = as.Date("1960-01-01"),
max = as.Date("2023-12-31"),
value = c(as.Date("1980-01-01"), as.Date("2020-01-01")),
timeFormat = "%Y-%m-%d")
}
dropdown <- function(){
selectInput("dropdownMenu",
"Choose an Option:",
choices = c("Covid-19 Recession" = "opt1",
"Lehmann Brother's Crash" = "opt2",
"Great Financial Crisis" = "opt3")
)
}
bodyText <- function(text){
tags$p(text, class = "bodyText")
}
ui <- fluidPage(
includeCSS("styles.css"),
div(
id = "Time Series Selection",
class = "main",
titlePanel("Time Series Analysis"),
mainPanel(
bodyText("Test text"),
div(class = "graphBorder",
plotOutput("timeSeriesGraph")),
slider(),
dropdown()
)
),
div(id = "scrolly-section",
scrolly_container("scr",
scrolly_graph(
plotOutput("timeSeriesGraph")  # Placeholder for the ggplot output
),
scrolly_sections(
scrolly_section(id = "section-blue", h3("Blue"), p("Blue section content")),
scrolly_section(id = "section-pink", h3("Pink"), p("Pink section content")),
scrolly_section(id = "section-purple", h3("Purple"), p("Purple section content")),
scrolly_section(id = "section-orange", h3("Orange"), p("Orange section content"))
)
)
),
titlePanel("Real Time vs Vintage Data")
)
#source("Time_Series.R")
set.seed(123)
dummyData <- data.frame(
date = seq(as.Date("1960-01-01"), as.Date("2023-12-31"), by = "month"),
value = cumsum(runif(768, min = -10, max = 10)) # Random walk data
)
server <- function(input, output) {
output$timeSeriesGraph <- renderPlot({
# Ensure highlightedData uses the filter based on selected date range
highlightedData <- dummyData %>%
filter(date >= input$dateRange[1], date <= input$dateRange[2])
# Start plotting using ggplot2 with dummyData as the base data
plot <- ggplot() +
geom_line(data = dummyData, aes(x = date, y = value)) +
geom_line(data = highlightedData, aes(x = date, y = value), color = "red", size = 1.5) +
#Colour the user selected training data red
labs(title = "Dummy Time Series Graph", x = "Date", y = "Value") +
theme_economist_white()
plot
})
}
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(scrollytell)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Scrolly Telling"),
sidebarLayout( sidebarPanel("Hi"),
tabsetPanel(id="tab",
tabPanel("bla",
fluidRow(h2("Hi")),
fluidRow(
scrolly_container("scr"
, scrolly_graph( textOutput("section"),
plotOutput("distPlot")
)
, scrolly_sections(
scrolly_section( id = "green",
sliderInput("bins", "Number of bins:", min = 1, max = 50, value = 30)
),
scrolly_section(id = "red",
h3("Title"),
p("dit is een paragraaf, die de grafiek rood maakt")
),
scrolly_section(id = "blue","Blauw"),
scrolly_section(id = "pink","Rose"),
scrolly_section(id = "purple","Paars"),
scrolly_section(id = "orange","Oranje boven!")
)
)
))
)
),
div("Footer")
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
col <- input$scr
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = col, border = 'white')
})
output$scr <- renderScrollytell({scrollytell()})
output$section <- renderText(paste0("Section: ", input$scr))
observe({cat("section:", input$scr, "\n")})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(scrollytell)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Scrolly Telling"),
sidebarLayout( sidebarPanel("Hi"),
tabsetPanel(id="tab",
tabPanel("bla",
fluidRow(h2("Hi")),
fluidRow(
scrolly_container("scr"
, scrolly_graph( textOutput("section"),
plotOutput("distPlot")
)
, scrolly_sections(
scrolly_section( id = "green",
sliderInput("bins", "Number of bins:", min = 1, max = 50, value = 30)
),
scrolly_section(id = "red",
h3("Title"),
p("dit is een paragraaf, die de grafiek rood maakt")
),
scrolly_section(id = "blue","Blauw"),
scrolly_section(id = "pink","Rose"),
scrolly_section(id = "purple","Paars"),
scrolly_section(id = "orange","Oranje boven!")
)
)
))
)
),
div("Footer")
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
col <- input$scr
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = col, border = 'white')
})
output$scr <- renderScrollytell({scrollytell()})
output$section <- renderText(paste0("Section: ", input$scr))
observe({cat("section:", input$scr, "\n")})
}
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$timeSeriesGraph <- renderPlot({
# Ensure highlightedData uses the filter based on selected date range
highlightedData <- dummyData %>%
filter(date >= input$dateRange[1], date <= input$dateRange[2])
# Start plotting using ggplot2 with dummyData as the base data
plot <- ggplot() +
geom_line(data = dummyData, aes(x = date, y = value)) +
geom_line(data = highlightedData, aes(x = date, y = value), color = "red", size = 1.5) +
#Colour the user selected training data red
labs(title = "Dummy Time Series Graph", x = "Date", y = "Value") +
theme_economist_white()
plot
})
}
library(shiny)
library(tidyverse)
library(ggthemes)
#devtools::install_github("statistiekcbs/scrollytell")
library(scrollytell)
#install.packages("styler")
library(styler)
slider = function(){
sliderInput("dateRange",
"Select Training Date:",
min = as.Date("1960-01-01"),
max = as.Date("2023-12-31"),
value = c(as.Date("1980-01-01"), as.Date("2020-01-01")),
timeFormat = "%Y-%m-%d")
}
dropdown <- function(){
selectInput("dropdownMenu",
"Choose an Option:",
choices = c("Covid-19 Recession" = "opt1",
"Lehmann Brother's Crash" = "opt2",
"Great Financial Crisis" = "opt3")
)
}
bodyText <- function(text){
tags$p(text, class = "bodyText")
}
ui <- fluidPage(
includeCSS("styles.css"),
div(
id = "Time Series Selection",
class = "main",
titlePanel("Time Series Analysis"),
mainPanel(
bodyText("Test text"),
div(class = "graphBorder",
plotOutput("timeSeriesGraph")),
slider(),
dropdown()
)
),
div(
id = "scrolly-section",
scrolly_container("scr",
scrolly_graph(
textOutput("Graph"),
plotOutput("timeSeriesGraph")  # Placeholder for the ggplot output
),
scrolly_sections(
scrolly_section(id = "section-blue", h3("Blue"), p("Blue section content")),
scrolly_section(id = "section-pink", h3("Pink"), p("Pink section content")),
scrolly_section(id = "section-purple", h3("Purple"), p("Purple section content")),
scrolly_section(id = "section-orange", h3("Orange"), p("Orange section content"))
)
)
),
titlePanel("Real Time vs Vintage Data")
)
#source("Time_Series.R")
set.seed(123)
dummyData <- data.frame(
date = seq(as.Date("1960-01-01"), as.Date("2023-12-31"), by = "month"),
value = cumsum(runif(768, min = -10, max = 10)) # Random walk data
)
server <- function(input, output) {
output$timeSeriesGraph <- renderPlot({
# Ensure highlightedData uses the filter based on selected date range
highlightedData <- dummyData %>%
filter(date >= input$dateRange[1], date <= input$dateRange[2])
# Start plotting using ggplot2 with dummyData as the base data
plot <- ggplot() +
geom_line(data = dummyData, aes(x = date, y = value)) +
geom_line(data = highlightedData, aes(x = date, y = value), color = "red", size = 1.5) +
#Colour the user selected training data red
labs(title = "Dummy Time Series Graph", x = "Date", y = "Value") +
theme_economist_white()
plot
})
}
shinyApp(ui,server)
library(shiny)
library(tidyverse)
library(ggthemes)
#devtools::install_github("statistiekcbs/scrollytell")
library(scrollytell)
#install.packages("styler")
library(styler)
slider = function(){
sliderInput("dateRange",
"Select Training Date:",
min = as.Date("1960-01-01"),
max = as.Date("2023-12-31"),
value = c(as.Date("1980-01-01"), as.Date("2020-01-01")),
timeFormat = "%Y-%m-%d")
}
dropdown <- function(){
selectInput("dropdownMenu",
"Choose an Option:",
choices = c("Covid-19 Recession" = "opt1",
"Lehmann Brother's Crash" = "opt2",
"Great Financial Crisis" = "opt3")
)
}
bodyText <- function(text){
tags$p(text, class = "bodyText")
}
ui <- fluidPage(
includeCSS("styles.css"),
div(
id = "Time Series Selection",
class = "main",
titlePanel("Time Series Analysis"),
mainPanel(
bodyText("Test text"),
div(class = "graphBorder",
plotOutput("timeSeriesGraph")),
slider(),
dropdown()
)
),
mainPanel(
div(
id = "scrolly-section",
scrolly_container("scr",
scrolly_graph(
textOutput("Graph"),
plotOutput("timeSeriesGraph")  # Placeholder for the ggplot output
),
scrolly_sections(
scrolly_section(id = "section-blue", h3("Blue"), p("Blue section content")),
scrolly_section(id = "section-pink", h3("Pink"), p("Pink section content")),
scrolly_section(id = "section-purple", h3("Purple"), p("Purple section content")),
scrolly_section(id = "section-orange", h3("Orange"), p("Orange section content"))
)
)
)
),
titlePanel("Real Time vs Vintage Data")
)
#source("Time_Series.R")
set.seed(123)
dummyData <- data.frame(
date = seq(as.Date("1960-01-01"), as.Date("2023-12-31"), by = "month"),
value = cumsum(runif(768, min = -10, max = 10)) # Random walk data
)
server <- function(input, output) {
output$timeSeriesGraph <- renderPlot({
# Ensure highlightedData uses the filter based on selected date range
highlightedData <- dummyData %>%
filter(date >= input$dateRange[1], date <= input$dateRange[2])
# Start plotting using ggplot2 with dummyData as the base data
plot <- ggplot() +
geom_line(data = dummyData, aes(x = date, y = value)) +
geom_line(data = highlightedData, aes(x = date, y = value), color = "red", size = 1.5) +
#Colour the user selected training data red
labs(title = "Dummy Time Series Graph", x = "Date", y = "Value") +
theme_economist_white()
plot
})
}
shinyApp(ui,server)
ui <- fluidPage(
includeCSS("styles.css"),
div(
id = "Time Series Selection",
class = "main",
titlePanel("Time Series Analysis"),
mainPanel(
bodyText("Test text"),
div(class = "graphBorder",
plotOutput("timeSeriesGraph")),
slider(),
dropdown()
),
mainPanel(
div(
id = "scrolly-section",
scrolly_container("scr",
scrolly_graph(
textOutput("Graph"),
plotOutput("timeSeriesGraph")  # Placeholder for the ggplot output
),
scrolly_sections(
scrolly_section(id = "section-blue", h3("Blue"), p("Blue section content")),
scrolly_section(id = "section-pink", h3("Pink"), p("Pink section content")),
scrolly_section(id = "section-purple", h3("Purple"), p("Purple section content")),
scrolly_section(id = "section-orange", h3("Orange"), p("Orange section content"))
)
)
)
)
),
titlePanel("Real Time vs Vintage Data")
)
shinyApp(ui,server)
